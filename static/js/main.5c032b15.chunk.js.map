{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","pages/NewMovie.js","pages/MovieDetails.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","data-testid","style","backgroundImage","backgroundPosition","backgroundSize","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","MovieList","loading","then","push","map","key","NewMovie","shouldRedirect","newMovie","movieData","nextId","length","MovieDetails","handleDeleteMovie","location","pathname","match","movieAPI","movieID","filter","status","console","log","alt","src","EditMovie","updatedMovie","App","exact","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c032b15.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Loading extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"loading\">Carregando...</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass MovieForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { ...props.movie };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit() {\r\n    const { onSubmit } = this.props;\r\n    onSubmit(this.state);\r\n  }\r\n\r\n  updateMovie(field, newValue) {\r\n    this.setState({ [field]: newValue });\r\n  }\r\n\r\n  renderTitleInput() {\r\n    const { title } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"movie_title\">\r\n          <input\r\n            placeholder=\"Insira o título\"\r\n            id=\"movie_title\"\r\n            type=\"text\"\r\n            className=\"validate\"\r\n            value={ title }\r\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\r\n          />\r\n          Título\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderSubtitleInput() {\r\n    const { subtitle } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"movie_subtitle\">\r\n          <input\r\n            placeholder=\"Insira o subtítulo\"\r\n            id=\"movie_subtitle\"\r\n            type=\"text\"\r\n            value={ subtitle }\r\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\r\n          />\r\n          Subtítulo\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderImagePathInput() {\r\n    const { imagePath } = this.state;\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <label htmlFor=\"movie_image\">\r\n          <input\r\n            placeholder=\"Insira o caminho da imagem\"\r\n            id=\"movie_image\"\r\n            type=\"text\"\r\n            value={ imagePath }\r\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\r\n          />\r\n          Imagem\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderStorylineInput() {\r\n    const { storyline } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"movie_storyline\">\r\n          <textarea\r\n            id=\"movie_storyline\"\r\n            value={ storyline }\r\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\r\n          />\r\n          Sinopse\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderGenreSelection() {\r\n    const { genre } = this.state;\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"movie_genre\">\r\n          Gênero\r\n          <select\r\n            id=\"movie_genre\"\r\n            value={ genre }\r\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\r\n          >\r\n            <option value=\"action\">Ação</option>\r\n            <option value=\"comedy\">Comédia</option>\r\n            <option value=\"thriller\">Suspense</option>\r\n            <option value=\"fantasy\">Fantasia</option>\r\n          </select>\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderRatingInput() {\r\n    const { rating } = this.state;\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"movie_rating\">\r\n          <input\r\n            placeholder=\"Dê a avaliação do filme\"\r\n            id=\"movie_rating\"\r\n            type=\"number\"\r\n            step={ 0.1 }\r\n            min={ 0 }\r\n            max={ 5 }\r\n            value={ rating }\r\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\r\n          />\r\n          Avaliação\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderSubmitButton() {\r\n    return (\r\n      <div>\r\n        <button\r\n          type=\"button\"\r\n          onClick={ this.handleSubmit }\r\n        >\r\n          Submit\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"edit-form\">\r\n          {this.renderTitleInput()}\r\n          {this.renderSubtitleInput()}\r\n          {this.renderImagePathInput()}\r\n          {this.renderStorylineInput()}\r\n          {this.renderGenreSelection()}\r\n          {this.renderRatingInput()}\r\n          {this.renderSubmitButton()}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieForm.propTypes = {\r\n  movie: PropTypes.objectOf(PropTypes.oneOfType(\r\n    [PropTypes.string, PropTypes.number, PropTypes.bool],\r\n  )).isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default MovieForm;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass MovieCard extends React.Component {\r\n  render() {\r\n    const { movie } = this.props;\r\n    return (\r\n      <div\r\n        data-testid=\"movie-card\"\r\n        className=\"movie-card\"\r\n        style={ {\r\n          backgroundImage: `url('${movie.imagePath}')`,\r\n          backgroundPosition: 'center center',\r\n          backgroundSize: 'contain',\r\n        } }\r\n      >\r\n        <div>\r\n          <p>\r\n            <strong>{'Title: '}</strong>\r\n            { movie.title }\r\n          </p>\r\n          <p>\r\n            <strong>{'Storyline: '}</strong>\r\n            <br />\r\n            { movie.storyline }\r\n          </p>\r\n          <p>\r\n            <Link to={ `movies/${movie.id}` }>VER DETALHES</Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieCard.propTypes = {\r\n  movie: PropTypes.objectOf(PropTypes.oneOfType(\r\n    [PropTypes.string, PropTypes.number, PropTypes.bool],\r\n  )).isRequired,\r\n};\r\n\r\nexport default MovieCard;\r\n","const movies = [\r\n  {\r\n    id: 1,\r\n    title: 'Kingsglaive',\r\n    subtitle: 'Final Fantasy XV',\r\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\r\n    rating: 4.5,\r\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\r\n    bookmarked: true,\r\n    genre: 'action',\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Final Fantasy',\r\n    subtitle: 'Spirits Within',\r\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\r\n    rating: 4.5,\r\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\r\n    bookmarked: false,\r\n    genre: 'fantasy',\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Ghost In The Shell',\r\n    subtitle: 'Ghost In The Shell',\r\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\r\n    rating: 5,\r\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\r\n    bookmarked: false,\r\n    genre: 'comedy',\r\n  },\r\n  {\r\n    id: 4,\r\n    title: 'Appleseed Alpha',\r\n    subtitle: 'Appleseed Alpha',\r\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\r\n    rating: 3.8,\r\n    imagePath: 'images/Appleseed_Alpha.jpg',\r\n    bookmarked: true,\r\n    genre: 'action',\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Resident Evil',\r\n    subtitle: 'Vendetta',\r\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\r\n    rating: 4.2,\r\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\r\n    bookmarked: true,\r\n    genre: 'fantasy',\r\n  },\r\n];\r\n\r\nexport default movies;\r\n","import data from './movieData';\r\n\r\nlocalStorage.setItem('movies', JSON.stringify(data));\r\n\r\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\r\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\r\n\r\nconst TIMEOUT = 2000;\r\nconst SUCCESS_STATUS = 'OK';\r\n\r\n// --------------------------------------------------------------------\r\n// A função simulateRequest simula uma requisição para uma API externa\r\n// Esse tipo de função que \"chama outra função\" é chamada de\r\n// \"currying function\" https://javascript.info/currying-partials\r\n// não se preocupe, estudaremos isso mais futuramente\r\n// --------------------------------------------------------------------\r\n\r\nconst simulateRequest = (response) => (callback) => {\r\n  setTimeout(() => {\r\n    callback(response);\r\n  }, TIMEOUT);\r\n};\r\n\r\nexport const getMovies = () => (\r\n  new Promise((resolve) => {\r\n    const movies = readMovies();\r\n    simulateRequest(movies)(resolve);\r\n  })\r\n);\r\n\r\nexport const getMovie = (movieId) => {\r\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\r\n  return new Promise((resolve) => {\r\n    simulateRequest(movie)(resolve);\r\n  });\r\n};\r\n\r\nexport const updateMovie = (updatedMovie) => (\r\n  new Promise((resolve) => {\r\n    const movies = readMovies().map((movie) => {\r\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\r\n        return { ...movie, ...updatedMovie };\r\n      }\r\n      return movie;\r\n    });\r\n    saveMovies(movies);\r\n    simulateRequest(SUCCESS_STATUS)(resolve);\r\n  })\r\n);\r\n\r\nexport const createMovie = (movieData) => (\r\n  new Promise((resolve) => {\r\n    let movies = readMovies();\r\n    const nextId = movies[movies.length - 1].id + 1;\r\n    const newMovie = { ...movieData, id: nextId };\r\n    movies = [...movies, newMovie];\r\n    saveMovies(movies);\r\n    simulateRequest(SUCCESS_STATUS)(resolve);\r\n  })\r\n);\r\n\r\nexport const deleteMovie = (movieId) => {\r\n  let movies = readMovies();\r\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\r\n  saveMovies(movies);\r\n\r\n  return new Promise((resolve) => {\r\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\r\n  });\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from '../components';\r\nimport MovieCard from '../components/MovieCard';\r\n\r\nimport * as movieAPI from '../services/movieAPI';\r\n\r\nclass MovieList extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      movies: [],\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { movies } = this.state;\r\n    movieAPI.getMovies().then((movie) => {\r\n      movies.push(...movie);\r\n      this.setState({ loading: false });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { movies, loading } = this.state;\r\n    if (loading) return <Loading />;\r\n    // Render Loading here if the request is still happening\r\n    return (\r\n      <>\r\n        <div\r\n          data-testid=\"movie-list\"\r\n          className=\"movie-list\"\r\n        >\r\n          {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\r\n        </div>\r\n        <ul>\r\n          <li><Link to=\"/movies/new\">ADICIONAR CARTÃO</Link></li>\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieList;\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport MovieForm from '../components/MovieForm';\r\nimport * as movieAPI from '../services/movieAPI';\r\n\r\nclass NewMovie extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.state = {\r\n      shouldRedirect: false,\r\n    };\r\n  }\r\n\r\n  handleSubmit(newMovie) {\r\n    movieAPI.createMovie(newMovie).then(() => this.setState({ shouldRedirect: true }));\r\n  }\r\n\r\n  render() {\r\n    const { shouldRedirect } = this.state;\r\n\r\n    if (shouldRedirect) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n      <div data-testid=\"new-movie\">\r\n        <MovieForm onSubmit={ this.handleSubmit } />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default NewMovie;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport * as movieAPI from '../services/movieAPI';\r\nimport { Loading } from '../components';\r\n\r\nclass MovieDetails extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      movie: {},\r\n      loading: true,\r\n      shouldRedirect: false,\r\n    };\r\n\r\n    this.handleDeleteMovie = this.handleDeleteMovie.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { location } = this.props;\r\n    const [id] = location.pathname.match(/[0-9]/);\r\n    movieAPI.getMovie(id).then((movie) => {\r\n      this.setState({ loading: false, movie });\r\n    });\r\n  }\r\n\r\n  handleDeleteMovie(movieID) {\r\n    this.setState({ loading: true });\r\n    movieAPI.deleteMovie(movieID).then(\r\n      () => this.setState({ shouldRedirect: true, loading: false }),\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { loading, movie, shouldRedirect } = this.state;\r\n    // Change the condition to check the state\r\n    // if (true) return <Loading />;\r\n    if (loading) return <Loading />;\r\n    if (shouldRedirect) return <Redirect to=\"/\" />;\r\n    const { id, title, storyline, imagePath, genre, rating, subtitle } = movie;\r\n    console.log();\r\n    return (\r\n      <div data-testid=\"movie-details\" className=\"movie-details\">\r\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\r\n        <div>\r\n          <p>{ `Subtitle: ${title}` }</p>\r\n          <p>{ `Subtitle: ${subtitle}` }</p>\r\n          <p>{ `Storyline: ${storyline}` }</p>\r\n          <p>{ `Genre: ${genre}` }</p>\r\n          <p>{ `Rating: ${rating}` }</p>\r\n          <p>\r\n            <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\r\n            <Link to=\"/\">VOLTAR</Link>\r\n            <button\r\n              type=\"button\"\r\n              id=\"delete-button\"\r\n              onClick={ () => this.handleDeleteMovie(id) }\r\n            >\r\n              DELETAR\r\n            </button>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieDetails.propTypes = {\r\n  location: PropTypes.objectOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default MovieDetails;\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Loading, MovieForm } from '../components';\r\nimport * as movieAPI from '../services/movieAPI';\r\n\r\nclass EditMovie extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movie: {},\r\n      loading: true,\r\n      shouldRedirect: false,\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { location } = this.props;\r\n    const [id] = location.pathname.match(/[0-9]/);\r\n    movieAPI.getMovie(id).then((movie) => {\r\n      this.setState({ loading: false, movie });\r\n    });\r\n  }\r\n\r\n  handleSubmit(updatedMovie) {\r\n    this.setState({ loading: true });\r\n    movieAPI.updateMovie(updatedMovie).then(\r\n      () => this.setState({ shouldRedirect: true }),\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { shouldRedirect, movie, loading } = this.state;\r\n    if (shouldRedirect) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    if (loading) {\r\n      return <Loading />;\r\n    }\r\n\r\n    return (\r\n      <div data-testid=\"edit-movie\">\r\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEditMovie.propTypes = {\r\n  location: PropTypes.objectOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default EditMovie;\r\n","import React, { Component } from 'react';\r\n\r\nclass NotFound extends Component {\r\n  render() {\r\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\r\n  }\r\n}\r\n\r\nexport default NotFound;\r\n","import { BrowserRouter as Router, Switch as Routes, Route } from 'react-router-dom';\r\nimport React from 'react';\r\nimport MovieList from './pages/MovieList';\r\nimport NewMovie from './pages/NewMovie';\r\nimport MovieDetails from './pages/MovieDetails';\r\nimport EditMovie from './pages/EditMovie';\r\nimport NotFound from './pages/NotFound';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route exact path=\"/\" component={ MovieList } />\r\n        <Route exact path=\"/movies/new\" component={ NewMovie } />\r\n        <Route exact path=\"/movies/:id\" component={ MovieDetails } />\r\n        <Route exact path=\"/movies/:id/edit\" component={ EditMovie } />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}